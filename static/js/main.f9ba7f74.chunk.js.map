{"version":3,"sources":["components/layouts/LayoutHeader.js","components/layouts/LayoutNav.js","pages/Home.js","pages/Matches.js","pages/Players.js","pages/Teams.js","pages/Test.js","pages/admin/Teams.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["Layout","LayoutNavBar","props","className","navigation","map","item","key","id","to","link","icon","size","label","HomePage","TestPage","AdminTeams","React","Component","pages","path","Test","Teams","Matches","Players","Home","library","add","fab","faCheckSquare","faCoffee","FecofaMenu","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAMeA,G,MAJA,kBACX,4C,QCoBWC,EAnBI,SAACC,GAAD,OACf,yBAAKC,UAAU,aACX,wBAAIA,UAAU,uBACTD,EAAME,WAAWC,KAAI,SAAAC,GAAI,OACtB,wBAAIH,UAAU,2BAA2BI,IAAMD,EAAKE,IAChD,kBAAC,IAAD,CAAMC,GAAKH,EAAKI,KAAOP,UAAU,kBAC7B,yBAAKA,UAAU,kBACX,kBAAC,IAAD,CAAiBQ,KAAK,eAAeC,KAAK,QAE9C,0BAAMT,UAAU,mBACXG,EAAKO,e,OCJnBC,MARf,WACI,OACA,6BACI,+CCHO,oBACb,+BCDa,oBACb,+BCDa,oBACb,+BCSaC,MAVf,WACI,OACI,6BACI,6C,wCCKGC,E,iLANX,OACE,+C,GAHmBC,IAAMC,WC8BhBC,EAvBD,kBACZ,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,gBACV,kBAAC,EAAD,OAEA,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,YACV,kBAACG,EAAD,OAEF,kBAAC,IAAD,CAAOH,KAAK,YACV,kBAACI,EAAD,OAEF,kBAAC,IAAD,CAAOJ,KAAK,KACV,kBAACK,EAAD,SChBNC,IAAQC,IAAIC,IAAKC,IAAeC,KAEhC,IAAMC,EAAa,CACjB,CACEvB,GAAI,EACJK,MAAO,SACPH,KAAM,IACNC,KAAM,IAER,CACEH,GAAI,EACJK,MAAO,WACPH,KAAM,WACNC,KAAM,IAER,CACEH,GAAI,EACJK,MAAO,UACPH,KAAM,SACNC,KAAM,IAER,CACEH,GAAI,EACJK,MAAO,YACPH,KAAM,WACNC,KAAM,KAsBKqB,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAAaC,WAAY2B,KAE3B,yBAAK5B,UAAU,cACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,mBACf,kBAAC,EAAD,WCtCS8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9ba7f74.chunk.js","sourcesContent":["import React from 'react';\n\nconst Layout = ()=>(\n    <header>FECOFA</header>\n);\n\nexport default Layout;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst LayoutNavBar=(props)=>(\n    <nav className=\"fc-navbar\">\n        <ul className=\"fc-navbar_container\">\n            {props.navigation.map(item=>(\n                <li className=\"fc-navbar_container-item\" key={ item.id }>\n                    <Link to={ item.link } className=\"fc-navbar_link\" >\n                        <div className=\"fc-navbar_icon\">\n                            <FontAwesomeIcon icon=\"check-square\" size=\"2x\" />\n                        </div>\n                        <span className=\"fc-navbar_label\">\n                            {item.label}\n                        </span>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    </nav>\n);\n\nexport default LayoutNavBar;\n\n","import React from 'react';\n\nfunction HomePage(){\n    return (\n    <div>\n        <span>Soy el home</span>\n    </div>\n    );\n};\n\nexport default HomePage;","import React from 'react';\n\nexport default ()=>(\n  <div></div>\n);","import React from 'react';\n\nexport default ()=>(\n  <div></div>\n);","import React from 'react';\n\nexport default ()=>(\n  <div></div>\n);","import React from 'react';\n\nfunction TestPage(){\n    return(\n        <div>\n            <span>\n                test page\n            </span>\n        </div>\n    );\n};\n\nexport default TestPage;","import React from 'react';\n\nclass AdminTeams extends React.Component {\n  render(){\n    return (\n      <div>AdminTeams</div>\n    );\n  };\n}\n\nexport default AdminTeams;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport HomePage from './Home';\nimport MatchesPage from './Matches';\nimport PlayersPage from './Players';\nimport TeamsPage from './Teams';\nimport TestPage from './Test';\nimport AdminTeams from './admin/Teams';\n\nconst pages = () => (\n  <Switch>\n  <Route path=\"/admin/teams\">\n    <AdminTeams />\n  </Route>\n    <Route path=\"/test\">\n      <TestPage />\n    </Route>\n    <Route path='/teams'>\n      <TeamsPage />\n    </Route>\n    <Route path='/matches'>\n      <MatchesPage />\n    </Route>\n    <Route path='/players'>\n      <PlayersPage />\n    </Route>\n    <Route path='/'>\n      <HomePage />\n    </Route>\n\n</Switch>\n);\nexport default pages;","import React from 'react';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\nimport FcLayoutHeader from './components/layouts/LayoutHeader';\nimport FcLayoutNav from './components/layouts/LayoutNav';\n\nimport Pages from './pages';\n\nlibrary.add(fab, faCheckSquare, faCoffee)\n\nconst FecofaMenu = [\n  {\n    id: 1,\n    label: 'inicio',\n    link: '/',\n    icon: ''\n  },\n  {\n    id: 2,\n    label: 'Partidos',\n    link: '/matches',\n    icon: ''\n  },\n  {\n    id: 3,\n    label: 'Equipos',\n    link: '/teams',\n    icon: ''\n  },\n  {\n    id: 4,\n    label: 'Jugadores',\n    link: '/players',\n    icon: ''\n  }\n];\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"fc-content_navbar\">\n          <FcLayoutNav navigation={FecofaMenu}/>\n        </div>\n        <div className=\"fc-content\">\n          <FcLayoutHeader />\n          <main className=\"fc-content_main\">\n           <Pages />\n          </main>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}